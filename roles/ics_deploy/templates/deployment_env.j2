import os.path;
import re;
###############################################
# Author: Anand Dasari
# Description : Template for Deploy/undeployment 
#               of ICS Artefacts on a  domain
# anand.dasari@vocalink.com              
# Organization: Vocalink
# Date :  2-02-2017              
#
###############################################

# target to deploy or from undeploy
target_names='{{ wls_config[domain].cluster_name }}';
domain_name='{{ wls_domain_config[domain].domain_name }}';
deploylist=['{{ env[domain].artifact_names | list | join("\',\'") }}'];
domain_application_home='{{ domain_application_home }}';
domain_configuration_home='{{ domain_configuration_home }}';

admin_server_url = 't3s://{{ wls_config[domain].admin_server_listen_address }}:{{ wls_config[domain].admin_server_listen_port}}';
admin_server_config_file = domain_configuration_home + '/admin_server_config_file.properties';
admin_server_key_file = domain_configuration_home + '/admin_server_key_file.properties';

# function to connect to admin server initially
def connect_to_admin_server():
    print 'CONNECT TO ADMIN SERVER';
    if os.path.isfile(admin_server_config_file) and os.path.isfile(admin_server_key_file):
        print '- USING CONFIG AND KEY FILE';
        connect(userConfigFile=admin_server_config_file, userKeyFile=admin_server_key_file, url=admin_server_url);
    else:
        print '-USING USERNAME AND PASSWORD';
        connect(admin_username, admin_password, admin_server_url);

## Application names defined in application folder of a domain

def getAppList():
    appList = cmo.getAppDeployments()

    return appList;

## method to return the applications
# checks apps on domain and check if any new added in deployed application home
# then that app also addd for next deployment 
def get_application_names():
    application_names = [];

    deployed_application_names = [];
    app_deployments = cmo.getAppDeployments()
    for app_deployment in app_deployments:
        deployed_application_names.append(app_deployment.getName());
# use the following if checking the flag and deploy
    if action == 'undeploy':
        return deployed_application_names;

    directory_entry_names = os.listdir(domain_application_home);
    for directory_entry_name in directory_entry_names:
        if not os.path.isfile(os.path.join(domain_application_home, directory_entry_name)):
            if directory_entry_name not in deployed_application_names:
                application_names.append(directory_entry_name);

    return application_names;

## Deploy multiple applications by reading from deploy folder
def deploy_applications(application_names):
    for application_name in application_names:
        application_path = os.path.join(domain_application_home, application_name);
        deployment_plan = application_path + '/plan/plan.xml';
        print 'DEPLOYMENT PLAN LOCATION = '+deployment_plan;
        deployment_artifact_path = application_path + '/app';
        deployment_artifact = deployment_artifact_path + '/' + os.listdir(deployment_artifact_path)[0];
        if os.path.isfile(deployment_plan):
            print 'DEPLOYMENT PLAN LOCATION = '+deployment_plan;
            print 'DEPLOYING APPLICATION ' + application_name + ' WITH DEPLOYMENT PLAN';
            deploy(appName=application_name, path=deployment_artifact, targets=target_names, planPath=deployment_plan);
        else:
            print 'DEPLOYING APPLICATION ' + application_name + ' WITHOUT DEPLOYMENT PLAN';
            deploy(appName=application_name, path=deployment_artifact, targets=target_names);


## Deploy if multiple applications taken from arguments

def deploy_application():
    for application_name in deploylist:
        try:
            application_path = os.path.join(domain_application_home, application_name);
            deployment_plan = application_path + '/plan/plan.xml';
            print 'DEPLOYMENT PLAN LOCATION = '+deployment_plan;
            deployment_artifact_path = application_path + '/app';
            deployment_artifact = deployment_artifact_path + '/' + os.listdir(deployment_artifact_path)[0];
            if os.path.isfile(deployment_plan):
                print 'DEPLOYING APPLICATION ' + application_name + ' WITH DEPLOYMENT PLAN';
                start_edit_mode();
                progress=deploy(appName=application_name, path=deployment_artifact, targets=target_names, planPath=deployment_plan, upload = 'True', retireTimeout = -1);
                progress.printStatus();
                save_and_active_changes();
            else:
                print 'DEPLOYING APPLICATION ' + application_name + ' WITHOUT DEPLOYMENT PLAN';
                start_edit_mode();
                progress=deploy(appName=application_name, path=deployment_artifact, targets=target_names, upload = 'True', retireTimeout = -1);
                progress.printStatus();
                save_and_active_changes();
        except:
            print dumpStack();
##  undeploymultiple applications
def undeploy_applications(application_names):
    for application_name in application_names:
        stopApplication(application_name);
        undeploy(appName=application_name);

## undeploy single application

def undeploy_application():
    for application_name in deploylist:
       try:
            start_edit_mode();
            stopApplication(application_name);
            progress=undeploy(appName=application_name);
            progress.printStatus();
            save_and_active_changes();
       except:
            print dumpStsack();


def start_edit_mode():
    print 'START EDIT MODE';
    edit();
    startEdit();

def save_and_active_changes():
    print 'SAVE AND ACTIVATE CHANGES';
    save();
    activate(block='true');

connect_to_admin_server();

#start_edit_mode();
# use this when multiple applications to be deployed 
#application_names = get_application_names();

#if action == 'deploy' and application_names:
#    deploy_applications(application_names);
#elif action == 'undeploy' and application_names:
#    undeploy_applications(application_names);
#else:
#    print 'NOTHING TO DO';

applist = getAppList();
if len(applist) >= 1:
    print 'undeploying applications'
    undeploy_application();
deploy_application();

#save_and_active_changes();
exit()
